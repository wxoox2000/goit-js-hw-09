{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SAC9BC,EAAY,CAChBC,WAAYJ,EAAKK,MACjBC,UAAWN,EAAKO,KAChBC,YAAaR,EAAKS,OAClBC,UAAWT,SAASC,cAAc,iBAEpCS,QAAQC,IAAIT,EAAUO,WA8BtBV,EAAKa,iBAAiB,UA5BA,SAAUC,GAC9BA,EAAIC,iBACJ,IAAIC,EAAW,EACXT,EAAOU,OAAOd,EAAUG,UAAUY,OAClCT,EAASQ,OAAOd,EAAUK,YAAYU,OACtCC,EAAQF,OAAOd,EAAUC,WAAWc,OAEpCE,EAAS,KACbC,aAAY,WACVL,GAAW,EACXI,EAASE,YAAW,WAoBxB,IAAuBC,EAAUlB,EACzBmB,EApBCR,EAAW,IACZG,GAASZ,IAkBMgB,EAhBHP,EAgBaX,EAhBHc,EAiBtBK,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GAChCL,EACFI,EAAQ,CAAEL,WAAUlB,UAEpBwB,EAAO,CAAEN,WAAUlB,S,KArBpByB,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUlB,EAAK0B,EAAL1B,MACjBP,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAAN7B,EAAM,M,IAE9D8B,OAAM,SAAAJ,G,IAAGR,EAAQQ,EAARR,SAAUlB,EAAK0B,EAAL1B,MAClBP,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAfX,EAAS,QAAYW,OAAN7B,EAAM,M,MAEzDE,GACAS,EAAWP,GACZ4B,aAAajB,E,GAGdD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\nconst selectors = {\n  delayInput: form.delay,\n  stepInput: form.step,\n  amountInput: form.amount,\n  createBtn: document.querySelector('.form button'),\n};\nconsole.log(selectors.createBtn);\n\nconst handlerSubmit = function (evt) {\n  evt.preventDefault()\n  let position = 0;\n  let step = Number(selectors.stepInput.value);\n  let amount = Number(selectors.amountInput.value);\n  let delay = Number(selectors.delayInput.value);\n  let timeStep = -step;\n  let timeId = null;\n  setInterval(() => {\n    position +=1;\n    timeId = setTimeout(() => {\n      if(position > 1){\n        delay += step;\n      }\n      createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    }, step)\n    if(position > amount){\n      clearTimeout(timeId);\n    } \n  \n  }, delay);\n};\nform.addEventListener('submit', handlerSubmit);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n  return promise;\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$selectors","delayInput","delay","stepInput","step","amountInput","amount","createBtn","console","log","addEventListener","evt","preventDefault","position1","Number","value","delay1","timeId","setInterval","setTimeout","position","shouldResolve","Math","random","Promise","resolve","reject","then","param","Notify","success","concat","catch","failure","clearTimeout"],"version":3,"file":"03-promises.68ac70d8.js.map"}